package com.orders;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/orders/") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired
    OrderService orderService;

    @Autowired
    private OrderObjcetRepository orderObjcetRepository;
    @Autowired
    private BookingRepository bookingRepository;

//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FU7
    // create new order/ CreateNewRelations / in orderobject specified eventid and ticketid
    @RequestMapping(method = RequestMethod.POST, value = "/new_order")
    public @ResponseBody
    CreateNewRelationsRES createNewRelations(@RequestBody OrderObjcet orderObjcet) {
        return orderService.createRelations(orderObjcet);
    }

    //FU8
    //show all orders of specific user
    @RequestMapping(method = RequestMethod.GET, value = "/user/{userid}")
    public @ResponseBody
    Iterable<OrderObjcet> showUserTickets(@PathVariable("userid") Long userid) {
        return orderService.findUserOrders(userid);
    }

    //FU9
    //MakeResignation
    @RequestMapping(method = RequestMethod.POST, value = "/resignation/{orderid}")
    public @ResponseBody
    MakeResignationRES makeResignation(@PathVariable("orderid") Long orderid) {
        return orderService.makeResignation(orderid);
    }

    //FU11
    //show all orders of specific event
    @RequestMapping(method = RequestMethod.GET, value = "/event/{eventid}")
    public @ResponseBody
    List<Booking> showAllTicketsFromEvent(@PathVariable("eventid") Long eventid) {
        return orderService.findAllTicketsFromEvent(eventid);
    }

    //FU11
    //cancel event and all tickets
    @RequestMapping(method = RequestMethod.GET, value = "/event/delete/{eventid}")
    public @ResponseBody
    StringRES cancelEvent(@PathVariable("eventid") Long eventid) {
        return orderService.cancelTicketsForEvent(eventid);
    }


//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
// old api/tests

    //    @Autowired // This means to get the bean called userRepository
//    // Which is auto-generated by Spring, we will use it to handle the data
//    private UserRepository userRepository;
//
//    @GetMapping(path="/add") // Map ONLY GET Requests
//    public @ResponseBody String addNewUser (@RequestParam String name
//            , @RequestParam String email) {
//        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
//
//        User n = new User();
//        n.setName(name);
//        n.setEmail(email);
//        userRepository.save(n);
//        return "Saved";
//    }
//

    // get order with specific idorder
    //@GetMapping(path = "/{order}") // Map ONLY GET Requests
    @RequestMapping(method = RequestMethod.GET, value = "/{order}")
    public @ResponseBody
    OrderObjcet getOrderDetails(@PathVariable("order") Long idorder) {
        //orderService.updateTicketStatus((long)45,"ppppp");
        //orderService.tttest();
        return orderObjcetRepository.findById(idorder).orElse(null);
    }

    // create order with specific iduser,idevent,idticket
    @RequestMapping(method = RequestMethod.POST, value = "/new_order_old")
    public @ResponseBody
    String addNewOrder(@RequestParam Long iduser, @RequestParam Long idevent, @RequestParam Long idticket) {
        try {
            orderService.testaddNewOrder(iduser,idevent,idticket);
        } catch (Exception e) {
            e.printStackTrace();
        }
//        OrderObjcet o = new OrderObjcet();
//        Booking b = new Booking();
//        b.setEventID(idevent);
//        b.setTicketID(idticket);
//        b.setOrderObjcet(o);
//        o.getBookings().add(b);
//        orderObjcetRepository.save(o);
        return "Saved";
    }


    //    @RequestMapping(method = RequestMethod.GET,value ="/test")
//    public @ResponseBody
//    String testtest() {
//        Logger log = LoggerFactory.getLogger(OrdersApplication.class);
//        RestTemplate restTemplate = new RestTemplate();
//        Quote quote = restTemplate.getForObject("http://gturnquist-quoters.cfapps.io/api/random", Quote.class);
//        log.info(quote.toString());
//        return quote.toString();
//    }

//    // delete order with specific idorder
//    @RequestMapping(method = RequestMethod.DELETE,path ="/delete_order/{order}")
//    public @ResponseBody
//    void deleteNewOrder(@PathVariable("order") Integer idorder) {
//        orderObjcetRepository.deleteById(idorder);
//    }
//

    // get all orders
    @RequestMapping(method = RequestMethod.GET, value = "/all_orders")
    public @ResponseBody
    Iterable<OrderObjcet> getAllOrders() {
        return orderObjcetRepository.findAll();
    }

}