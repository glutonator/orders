package com.orders;

import org.aspectj.weaver.ast.Or;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

//import com.orders.User;
//import com.orders.UserRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
//    @Autowired // This means to get the bean called userRepository
//    // Which is auto-generated by Spring, we will use it to handle the data
//    private UserRepository userRepository;
//
//    @GetMapping(path="/add") // Map ONLY GET Requests
//    public @ResponseBody String addNewUser (@RequestParam String name
//            , @RequestParam String email) {
//        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
//
//        User n = new User();
//        n.setName(name);
//        n.setEmail(email);
//        userRepository.save(n);
//        return "Saved";
//    }
//
    @Autowired
    private OrderObjcetRepository orderObjcetRepository;
    @Autowired
    private BookingRepository bookingRepository;
//
//
    // get order with specific idorder
    //@GetMapping(path = "/orders/{order}") // Map ONLY GET Requests
    @RequestMapping(method = RequestMethod.GET,value ="/orders/{order}" )
    public @ResponseBody
    OrderObjcet getOrderDetails(@PathVariable("order") Long idorder) {
     //   tttest();
        return orderObjcetRepository.findById(idorder).orElse(null);
    }

    // create order with specific iduser,idevent,idticket
    @RequestMapping(method = RequestMethod.POST,value ="/orders/new_order")
    public @ResponseBody
    String addNewOrder(@RequestParam Long iduser,@RequestParam Long idevent,@RequestParam Long idticket) {
        OrderObjcet o = new OrderObjcet();
        Booking b = new Booking();
        b.setEventID(idevent);
        b.setTicketID(idticket);
        b.setOrderObjcet(o);
        o.getBookings().add(b);
        orderObjcetRepository.save(o);
        return "Saved";
    }
//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
    //FU7
    // create new order/ CreateNewRelations / in orderobject specified eventid and ticketid
    @RequestMapping(method = RequestMethod.POST,value ="/orders/new_order2")
    public @ResponseBody
    CreateNewRelationsRES CreateNewRelations(@RequestBody OrderObjcet orderObjcet) {
        for(Booking b : orderObjcet.getBookings()) {
            b.setOrderObjcet(orderObjcet);
            b.setRelationCreationDate(LocalDateTime.now());
            b.setRelationStatus(true);
        }
        orderObjcet.setPaymentOrder(orderObjcetRepository.count()+10);
        orderObjcetRepository.save(orderObjcet);
        //update tickets status
        //for UpdateTicketStatus();
        //response if saving is successful
        //tutaj moze być inna flaga, że się udało wysłać niż "saved"
        return new CreateNewRelationsRES(true,orderObjcet.getOrderID());
        //return "Saved"; //to do backendu
    }

//    @RequestMapping(method = RequestMethod.GET,value ="/orders/test")
//    public @ResponseBody
//    String testtest() {
//        Logger log = LoggerFactory.getLogger(OrdersApplication.class);
//        RestTemplate restTemplate = new RestTemplate();
//        Quote quote = restTemplate.getForObject("http://gturnquist-quoters.cfapps.io/api/random", Quote.class);
//        log.info(quote.toString());
//        return quote.toString();
//    }

    String tttest() {
        Logger log = LoggerFactory.getLogger(OrdersApplication.class);
        final String uri = "http://localhost:8080/demo/orders/new_order2";
        OrderObjcet orderObjcet = new OrderObjcet((long)88,(long)45);
        RestTemplate restTemplate = new RestTemplate();
        CreateNewRelationsRES resp=restTemplate.postForObject(uri,orderObjcet,CreateNewRelationsRES.class);
        log.info(resp.toString());
        return resp.toString();
    }

    //FU7
    //update ticket status to occupied
    boolean UpdateTicketStatus(Long eventId, Long ticketId, String TicketStatus) {
        final String uri = "http://localhooooost:8080/managment/{eventid}/{ticketid}";
        Map<String, String> params = new HashMap<String, String>();
        params.put("eventid", eventId.toString());
        params.put("ticketid", ticketId.toString());
        params.put("ticketStatus", TicketStatus);

        Ticket ticketUpdate = new Ticket(eventId,ticketId,TicketStatus);
        RestTemplate restTemplate = new RestTemplate();
        restTemplate.put(uri,ticketUpdate,params);
        return true;
    }

    //FU8
    //show all orders of specific user
    @RequestMapping(method = RequestMethod.GET,value ="/orders/user/{userid}" )
    public @ResponseBody
    Iterable<OrderObjcet> ShowUserTickets(@PathVariable("userid") Long userid) {
        return orderObjcetRepository.findByUserID(userid);
    }
    //FU9
    //MakeResignation
    @RequestMapping(method = RequestMethod.PUT,value ="/orders/resignation/{orderid}")
    public @ResponseBody
    MakeResignationRES MakeResignation(@PathVariable("orderid") Long orderid) {

        OrderObjcet orderObjcet=orderObjcetRepository.findById(orderid).orElse(null);
        for(  Booking b: orderObjcet.getBookings()) {
            //dla kazdego b trzeba wyslać UpdateTicketStatus
        }
        return new MakeResignationRES(true,orderid, orderObjcet.getPaymentOrder());
        //return "Saved"; //to do backendu
    }

    //FU11
    //show all orders of specific event
    @RequestMapping(method = RequestMethod.GET,value ="/orders/event/{eventid}" )
    public @ResponseBody
    Iterable<Booking> ShowAllTicketsFromEvent (@PathVariable("eventid") Long eventid) {
         return bookingRepository.findByEventID(eventid);

    }
    //FU11
    //cancel event and all tickets
    @RequestMapping(method = RequestMethod.GET,value ="/orders/event/delete/{eventid}" )
    public @ResponseBody
    boolean CancelEvent (@PathVariable("eventid") Long eventid) {
        List<Booking> bookingList= bookingRepository.findByEventID(eventid);
        if(bookingList!=null) {
            //trzeba zaupdateować statusy biletów z mikroserv zarz wydarzeniami
            //UpdateTicketStatusForEvent(eventid);
            return true;
        }
        else {
            //no records in databese
            return false;
        }
    }

    //FU11
    boolean UpdateTicketStatusForEvent(Long eventid) {
        //tutaj trzeba zapytanie do mikroserwisu zarz wydarz by zminił stan biletow
        return true;
    }



//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////


//    // delete order with specific idorder
//    @RequestMapping(method = RequestMethod.DELETE,path ="/orders/delete_order/{order}")
//    public @ResponseBody
//    void deleteNewOrder(@PathVariable("order") Integer idorder) {
//        orderObjcetRepository.deleteById(idorder);
//    }
//

    // get all orders
    @RequestMapping(method = RequestMethod.GET,value ="/orders/all_orders" )
    public @ResponseBody
    Iterable<OrderObjcet> getAllOrders() {
        return orderObjcetRepository.findAll();
    }

}